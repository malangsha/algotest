from typing import Dict, Any, Optional
from datetime import datetime
from utils.constants import SignalType

class Signal:
    """
    Represents a trading signal generated by a strategy.
    """
    
    def __init__(self,
                 instrument,
                 signal_type: SignalType,
                 price: float,
                 timestamp: Optional[datetime] = None,
                 source: str = None,
                 metadata: Dict[str, Any] = None):
        """
        Initialize a trading signal.
        
        Args:
            instrument: The instrument this signal applies to
            signal_type: Type of signal (BUY, SELL, etc.)
            price: Price at which the signal was generated
            timestamp: Time when the signal was generated
            source: Source of the signal (e.g., strategy name or ID)
            metadata: Additional information related to the signal
        """
        self.instrument = instrument
        self.signal_type = signal_type
        self.price = price
        self.timestamp = timestamp or datetime.now()
        self.source = source
        self.metadata = metadata or {}
        
    def __str__(self) -> str:
        """String representation of the signal."""
        return (f"Signal({self.source}): {self.signal_type.name} {self.instrument.symbol} @ "
                f"{self.price:.2f} ({self.timestamp.strftime('%Y-%m-%d %H:%M:%S')})")
    
    def __repr__(self) -> str:
        """Detailed representation of the signal."""
        return (f"Signal(instrument={self.instrument.symbol}, "
                f"signal_type={self.signal_type.name}, "
                f"price={self.price:.2f}, "
                f"timestamp={self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}, "
                f"source={self.source}, "
                f"metadata={self.metadata})") 